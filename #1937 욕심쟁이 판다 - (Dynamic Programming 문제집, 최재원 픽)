/*
2016.8.19
서성준
알고리즘 연습문제 - Dynamic Programming
#1937 욕심쟁이 판다 - (Dynamic Programming 문제집, 최재원 픽)
*/


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int> > food;
vector<vector<int> > dp;
int n;

int solve(int y, int x, vector<vector<bool> > visit) {
	//그 지점을 방문했다.
	visit[y][x] = true;
	//밖으로 나가는 경우는 하루도 못산다!
	if (x<0 || y<0 || x == n || y == n)
		return 0;
	//dp조건.
	int& ret = dp[y][x];
	if (ret != -1)
		return ret;
	//retCondition 이 true 이면 return!
	bool retCondition = true;
	//만약 갈수 있는 곳이 있으면 false
	//만약 먹이가 더 큰곳이 있으면 false
	if (x>0 && (!visit[y][x - 1] || food[y][x - 1]>food[y][x]))
		retCondition = false;
	if (y>0 && (!visit[y - 1][x] || food[y - 1][x]>food[y][x]))
		retCondition = false;
	if (x<n - 1 && (!visit[y][x + 1] || food[y][x + 1]>food[y][x]))
		retCondition = false;
	if (y<n - 1 && (!visit[y + 1][x] || food[y + 1][x]>food[y][x]))
		retCondition = false;
	//만약 retCondition이 true면, 거기선 하루밖에 못 산다!
	if (retCondition)
		return ret = 1;
	//ret은 지금 그곳에서 하루 산 것과, 사방에서 살수있는 최대값을 합한 것들 중 최대.
	//오른쪽
	if (x<n - 1 && (!visit[y][x + 1] && food[y][x + 1]>food[y][x]))
		ret = max(ret, 1 + solve(y, x + 1, visit));
	//위쪽
	if (y<n - 1 && (!visit[y + 1][x] && food[y + 1][x]>food[y][x]))
		ret = max(ret, 1 + solve(y + 1, x, visit));
	//왼쪽
	if (x>0 && (!visit[y][x - 1] && food[y][x - 1]>food[y][x]))
		ret = max(ret, 1 + solve(y, x - 1, visit));
	//아래쪽
	if (y>0 && (!visit[y - 1][x] && food[y - 1][x]>food[y][x]))
		ret = max(ret, 1 + solve(y - 1, x, visit));
	if (ret == -1)
		ret = 1;
	return ret;
}

int main() {
	int input;
	cin >> n;
	vector<vector<bool> > visit;
	food.assign(n, vector<int>(n, 0));
	visit.assign(n, vector<bool>(n, false));
	dp.assign(n, vector<int>(n, -1));

	for (int i = 0; i<n; i++) {
		for (int j = 0; j<n; j++) {
			cin >> input;
			food[i][j] = input;
		}
	}

	for (int i = 0; i<n; i++) {
		for (int j = 0; j<n; j++) {
			solve(i, j, visit);
		}
	}
	int maxi = -1;
	for (int i = 0; i<n; i++) {
		for (int j = 0; j<n; j++) {
			maxi = max(maxi, dp[i][j]);
		}
	}
	cout << maxi;

	return 0;
}
